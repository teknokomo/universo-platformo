[gd_scene load_steps=13 format=3 uid="uid://cab6foemqg1pd"]

[ext_resource type="PackedScene" uid="uid://bmxe6vphltuan" path="res://apps/space-objects/Vostok.glb" id="1_w7c0d"]
[ext_resource type="PackedScene" uid="uid://b7etsuv0a3lmd" path="res://apps/space-objects/Station.tscn" id="2_afrrc"]

[sub_resource type="GDScript" id="GDScript_fxpjj"]
script/source = "extends Node3D

var planet_file = preload(\"res://apps/space-objects/planet.tscn\")
var ice_asteroid_file = preload(\"res://apps/space-objects/Asteroids/Ice_asteroid/ice_asteroid.tscn\")

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	#get_parent().load_hangar()
	for i in range(60):
		var planet = planet_file.instantiate()
		planet.position = Vector3(randf()-0.5, randf()-0.5, randf()-0.5) * 10000
		planet.add_to_group(\"Planets\")
		for j in range(10):
			var ice_asteroid = ice_asteroid_file.instantiate()
			ice_asteroid.position = Vector3(randf()-0.5, randf()-0.5, randf()-0.5).normalized() * 120
			#ice_asteroid.position += planet.position
			planet.add_child(ice_asteroid)
		$Space.add_child(planet)
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	if Input.is_key_pressed(KEY_ESCAPE):
		get_tree().quit()
	pass
"

[sub_resource type="GDScript" id="GDScript_s32g0"]
script/source = "extends Camera3D

@export var pointer_color : Color
@export var colcurve : Curve

@onready var spaceship = get_parent().find_child(\"Spaceship\")

var objects : PackedVector3Array

var sel_idx = 0
var selected : Vector3

var target_transform

var animation = 2

var target_distance = 3

var space

func update_target():
	if space.get_child_count() > 0:
		sel_idx %= space.get_child_count()
		selected = space.get_child(sel_idx).position
		target_transform = transform.looking_at(selected)
		if objects.is_empty():
			for i in range(space.get_child_count()):
				objects.append(space.get_child(i).position)
	animation = 0
	if space.get_child(sel_idx).is_in_group(\"Planets\"):
		$Scanner_mode.set_process(true)
	else:
		$Scanner_mode.set_process(true)
	$Scanner_mode.target_changed(selected)

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	target_transform = transform
	space = get_parent().find_child(\"Space\")
	#print(space)
	#update_target()
	pass # Replace with function body.

func follow(from, to, distance):
	var dir = (to - from).normalized()
	var basis = Basis.IDENTITY
	basis.looking_at(dir)
	var tr = Transform3D(basis, to - dir * distance)
	return tr

func _input(event: InputEvent) -> void:
	if event is InputEventKey:
		if event.pressed:
			if event.keycode == KEY_A:
				sel_idx += 1
				#sel_idx = find_nearest(false)
				update_target()
			if event.keycode == KEY_D:
				pass
				#sel_idx = find_nearest(true)
				sel_idx -= 1
				update_target()
			if event.keycode == KEY_SPACE:
				spaceship.set_target(objects[sel_idx])
				#print(\"follow\")
			if event.keycode == KEY_E:
				if space.get_child(sel_idx).name == \"Station\":
					if space.get_child(sel_idx).global_position.distance_to(global_position) < 50:
						get_parent().get_parent().load_hangar()
	if event is InputEventMouseMotion:
		if event.button_mask & MOUSE_BUTTON_MASK_LEFT:
			var vec = target_transform.origin - spaceship.target.origin
			var tr = target_transform * spaceship.target.inverse()
			tr = tr.rotated(Vector3.UP, deg_to_rad(event.relative.x))
			tr = tr.rotated(transform.basis * Vector3.LEFT, deg_to_rad(event.relative.y))
			target_transform.origin.y += deg_to_rad(event.relative.y)
			target_transform.origin += global_transform.basis * Vector3.LEFT * deg_to_rad(event.relative.x)
			target_transform = follow(target_transform.origin, spaceship.transform.origin, target_distance)
			target_transform = target_transform.looking_at(spaceship.transform.origin)
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_WHEEL_UP:
			target_distance *= 0.9
			target_transform = follow(target_transform.origin, spaceship.transform.origin, target_distance)
			target_transform = target_transform.looking_at(spaceship.transform.origin)
		if event.button_index == MOUSE_BUTTON_WHEEL_DOWN:
			target_distance /= 0.9
			target_transform = follow(target_transform.origin, spaceship.transform.origin, target_distance)
			target_transform = target_transform.looking_at(spaceship.transform.origin)

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	transform = transform.interpolate_with(target_transform, 0.1)
	$Scanner_mode.queue_redraw()
	$Interface.queue_redraw()
	if is_position_in_frustum(selected):
		animation += delta
	else:
		animation = 0
	if objects.is_empty():
		for i in range(space.get_child_count()):
			objects.append(space.get_child(i).position)
	#if not objects.is_empty():
		#for i in range(1):
		#	_rand_sort()
		#selected = objects[sel_idx]
	#print(objects.size())


func _on_interface_draw() -> void:
	var I = $Interface
	var center = get_window().size / 2
	var amax = 1
	var d = min(animation, amax)
	d = sqrt(d)
	if !is_position_behind(selected):
		I.draw_circle(unproject_position(selected), 7, Color(pointer_color, amax-d).lerp(Color.BEIGE, colcurve.sample(d)))
		I.draw_circle(unproject_position(selected), (d)*50, Color(pointer_color, amax-d).lerp(Color.BEIGE, colcurve.sample(d)), false, 5)
	#draw_circle()
	pass # Replace with function body.
"

[sub_resource type="Curve" id="Curve_xfs4b"]
_data = [Vector2(0.2, 1), 0.0, 0.0, 0, 0, Vector2(0.673684, 0), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="GDScript" id="GDScript_7s2eg"]
script/source = "extends Node2D

@onready var cam = get_parent()
#@export var appearance
@export var ore_color : Color

var mineral_array : Array

var gen_timer = 0

class MineralMarker:
	var anim
	var pos
	var center
	var queue_remove = false
	func set_prop(pos, center):
		self.anim = 0
		self.pos = pos
		self.center = center
	func draw(painter: CanvasItem):
		var anim1 = self.anim*self.anim
		var coords = painter.cam.unproject_position(self.center + self.pos)
		var coords2 = painter.cam.unproject_position(self.center + self.pos+self.pos.normalized() * lerpf(15, 4, anim1))
		if queue_remove:
			var spaceship_screen = painter.cam.unproject_position(painter.cam.spaceship.global_position)
			coords2 = coords2.lerp(spaceship_screen, anim1)
		if not painter.cam.is_position_behind(self.center + self.pos):
			#if (self.center - painter.cam.position).dot(self.pos) < 0:
			var col1 = painter.ore_color
			if queue_remove:
				col1 = Color(col1, 1-anim1)
			else:
				col1 = Color(col1, anim1)
			painter.draw_line(coords, coords2, col1, 5)
			painter.draw_circle(coords, 2.5, col1)
			painter.draw_circle(coords2, 2.5, col1)
	func process(delta):
		if self.anim < 1:
			self.anim += delta
		if self.anim > 1:
			self.anim = 1
	func signal_delete():
		self.queue_remove = true
		self.anim = 0

func target_changed(target):
	mineral_array.clear()
	for i in range(00):
		var m = MineralMarker.new()
		m.set_prop(Vector3(randf()-0.5, randf()-0.5, randf()-0.5).normalized()*100, target)
		mineral_array.append(m)

func generate_ore():
	var m = MineralMarker.new()
	var pos = (cam.position - cam.selected) + Vector3(randf()-0.5, randf()-0.5, randf()-0.5) * 30
	m.set_prop(pos.normalized()*100, cam.selected)
	mineral_array.append(m)

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.

func _draw() -> void:
	var coords = cam.unproject_position(cam.selected)
	#draw_circle(coords, 10, Color.BLUE)
	for marker in mineral_array:
		marker.draw(self)


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	for marker in mineral_array:
		marker.process(delta*4)
	if not mineral_array.is_empty():
		if mineral_array.front().queue_remove:
			if mineral_array.front().anim >= 1:
				mineral_array.pop_front()
	if gen_timer > 0:
		if Input.is_key_pressed(KEY_E):
			if gen_timer - delta <= 0:
				generate_ore()
			gen_timer -= delta
			#print(gen_timer)
		elif Input.is_key_pressed(KEY_R):
			#print(\"Key R\")
			if gen_timer - delta <= 0:
				for marker in mineral_array:
					if not marker.queue_remove:
						mining_request()
						marker.signal_delete()
						#cam.find_child(\"Ore_display\").ore_target += randf_range(0.9, 1.1)
						break
			gen_timer -= delta
		else:
			gen_timer = 0
	else:
		if Input.is_key_pressed(KEY_E):
			gen_timer = randf()
		elif Input.is_key_pressed(KEY_R):
			gen_timer = 0.1
	pass

func mining_request():
	var url = \"http://127.0.0.1:8080/mining\"
	if $MineRequest.get_http_client_status() == HTTPClient.STATUS_DISCONNECTED:
		var error = $MineRequest.request(url)

func _on_http_request_request_completed(result: int, response_code: int, headers: PackedStringArray, body: PackedByteArray) -> void:
	cam.find_child(\"Ore_display\").ore_update()
	pass # Replace with function body.
"

[sub_resource type="GDScript" id="GDScript_s08ui"]
script/source = "extends Node2D

@export var drawing_font : Font
#@onready var root = get_parent().get_parent().get_parent()
@onready var ore_request = $OreRequest

var ore = 0
var ore_target = 0

var description = \"\"\"Навести курсор - выбрать планету
Перетаскивание - обзор
Колесо мыши - приблизить/отдалить
Клик по выбранной планете/Space - прыжок к планете
A/D - следующая/предыдущая планета в порядковом номере
Удерживать E - сканировать ресурсы
E (возле станции) - зайти/выйти из станции
Удерживать R - собрать ресурсы\"\"\"

func ore_update():
	var url = \"http://127.0.0.1:8080/ore_data\"
	var error = ore_request.request(url)

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	ore_request.request_completed.connect(_on_request_completed)
	ore_update()
	pass # Replace with function body.

func _on_request_completed(result, response_code, headers, body):
	if response_code == 200:
		print(\"Ответ: \", body.get_string_from_utf8())
		var data = parse_json(body.get_string_from_utf8())
		ore_target = float(data[\"starship_ore\"])
	else:
		print(\"Ошибка: \", response_code)

func parse_json(json_string: String):
	var json = JSON.new()
	var parse_result = json.parse(json_string)

	if parse_result == OK:
		var data = json.get_data()
		print(\"Парсинг успешен: \", data)
		return data
		# Теперь вы можете работать с данными, например:
		# var value = data[\"key\"]  # Замените \"key\" на нужный ключ
	else:
		print(\"Ошибка парсинга JSON: \", json.get_error_message())

func _draw() -> void:
	var text = \"Запасы руды: \" + str(ore - fmod(ore, 0.001))
	draw_multiline_string(drawing_font, Vector2(get_viewport().size.x - 250, 40), text, HORIZONTAL_ALIGNMENT_RIGHT, -1, 22)
	draw_multiline_string(drawing_font, Vector2(20, 40), description)

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	ore = lerpf(ore, ore_target, 0.2)
	queue_redraw()
"

[sub_resource type="SystemFont" id="SystemFont_uebsj"]
subpixel_positioning = 0

[sub_resource type="GDScript" id="GDScript_ceowy"]
script/source = "extends Node2D

@onready var cam : Camera3D = get_parent()

var my_thread: Thread = null
var thread_running: bool = false

var sel_timer = 0

var select_target = null

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.

func search_process():
	var sdist = INF # Screen distance
	var nearest : int
	for i in range(len(cam.objects)):
		var obj = cam.objects[i]
		if not cam.is_position_behind(obj):
			var pos = cam.unproject_position(obj)
			#var pos = proj * obj
			#pos = Vector2(pos.x, pos.y)
			#print(pos)
			if pos.distance_to(get_viewport().get_mouse_position()) < sdist:
				nearest = i
				sdist = pos.distance_to(get_viewport().get_mouse_position())
	if sdist < 35:
		if select_target != nearest:
			select_target = nearest
			sel_timer = 0
	else:
		select_target = null
	thread_running = false

func _draw() -> void:
	if select_target != null and sel_timer < 1:
		var obj = cam.objects[select_target]
		var offset = -PI/2
		draw_arc(cam.unproject_position(obj), 10, offset, PI * sel_timer * 2 + offset, 50, cam.pointer_color, 3, true)

func _input(event: InputEvent) -> void:
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_LEFT:
			if select_target == cam.sel_idx:
				cam.spaceship.set_target(cam.objects[cam.sel_idx])

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	queue_redraw()
	#if my_thread == null:
	#	my_thread = Thread.new()
	#if thread_running == false:
	#	my_thread.wait_to_finish()
	#	my_thread.start(search_process, 0)
	search_process()
	var d1 = delta / 2
	if select_target != null and select_target != cam.sel_idx:
		if sel_timer < 1:
			if sel_timer + d1 >= 1:
				cam.sel_idx = select_target
				cam.update_target()
				sel_timer = 1
			else:
				sel_timer += d1
	pass
"

[sub_resource type="GDScript" id="GDScript_xasjn"]
script/source = "extends MeshInstance3D

var target
var origin
var progress

@export var speedcurve : Curve
@onready var cam = get_parent().find_child(\"Camera3D\")

func follow(from, to, distance):
	var dir = (to - from).normalized()
	var basis = Basis.IDENTITY
	basis = basis.looking_at(dir)
	var tr = Transform3D(basis, to - dir * distance)
	return tr

func set_target(target):
	var target_size = 100
	var obj = cam.space.get_child(cam.sel_idx)
	if obj is VisualInstance3D:
		target_size = obj.get_aabb().get_longest_axis_size()/2
	$\".\".origin = transform
	$\".\".target = follow(position, target, target_size * 1.4)
	cam.target_transform = follow(cam.position, $\".\".target*$Track.position, 3)
	progress = 0

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	origin = transform
	target = transform
	progress = INF
	pass # Replace with function body.

func num_cross(num, a, b):
	return a < num and (a+b) >= num

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	transform = transform.interpolate_with(target, 0.103)
	#cam.target_transform = follow(cam.position, target*$Track.position, 3)
	if progress < 1 and 0:
		transform = origin.interpolate_with(target, speedcurve.sample(progress))
		if num_cross(0.9, progress, delta):
			cam.target_transform = follow(cam.position, target*$Track.position, cam.target_distance)
		progress += delta * 1
		#print(progress)
	pass
"

[sub_resource type="Curve" id="Curve_7stfx"]
_data = [Vector2(0, 0), 0.0, 0.0, 0, 0, Vector2(0.447368, 0.131868), 0.659341, 0.659341, 0, 0, Vector2(0.621053, 0.802198), 1.41439, 1.41439, 0, 0, Vector2(1, 1), 0.0, 0.0, 0, 0]
point_count = 4

[sub_resource type="Environment" id="Environment_a1ax2"]
background_mode = 1
ambient_light_source = 2
ambient_light_color = Color(0.270222, 0.270222, 0.270222, 1)

[node name="Main" type="Node3D"]
script = SubResource("GDScript_fxpjj")

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.953412, 0.301671, 0, -0.301671, 0.953412, 0, 0.407301, 1.09294)
current = true
far = 10000.0
script = SubResource("GDScript_s32g0")
pointer_color = Color(0.876688, 0.683372, 0.288181, 1)
colcurve = SubResource("Curve_xfs4b")

[node name="Scanner_mode" type="Node2D" parent="Camera3D"]
script = SubResource("GDScript_7s2eg")
ore_color = Color(1, 0.825743, 0.187742, 1)

[node name="MineRequest" type="HTTPRequest" parent="Camera3D/Scanner_mode"]

[node name="Interface" type="Node2D" parent="Camera3D"]

[node name="Ore_display" type="Node2D" parent="Camera3D"]
script = SubResource("GDScript_s08ui")
drawing_font = SubResource("SystemFont_uebsj")

[node name="OreRequest" type="HTTPRequest" parent="Camera3D/Ore_display"]

[node name="Object_select" type="Node2D" parent="Camera3D"]
script = SubResource("GDScript_ceowy")

[node name="Spaceship" type="MeshInstance3D" parent="."]
script = SubResource("GDScript_xasjn")
speedcurve = SubResource("Curve_7stfx")

[node name="Vostok2" parent="Spaceship" instance=ExtResource("1_w7c0d")]
transform = Transform3D(-4.15258e-09, 0, 0.095, 0, 0.095, 0, -0.095, 0, -4.15258e-09, 0, 0, -0.33)

[node name="Track" type="Node3D" parent="Spaceship"]

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(0.489687, -0.664556, 0.564422, 0, 0.647349, 0.762194, -0.871898, -0.373236, 0.316998, 3.27062, 1.15951, 0.38582)
shadow_enabled = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_a1ax2")

[node name="Space" type="Node3D" parent="."]

[node name="Station" parent="Space" instance=ExtResource("2_afrrc")]
transform = Transform3D(3.658, 0, 0, 0, 1.824, 0, 0, 0, 7.305, -4.62255, 1.72616, -27.3919)

[connection signal="request_completed" from="Camera3D/Scanner_mode/MineRequest" to="Camera3D/Scanner_mode" method="_on_http_request_request_completed"]
[connection signal="draw" from="Camera3D/Interface" to="Camera3D" method="_on_interface_draw"]
